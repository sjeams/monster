{"version":3,"sources":["assets\\Script\\login\\background.js"],"names":["cc","Class","Component","properties","onLoad","start","loadingBackground","remoteUrl","self","loader","load","url","type","err","texture","node","getComponent","Sprite","spriteFrame","SpriteFrame"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfQ,GAHP;AAqBL;AAEAC,EAAAA,MAvBK,oBAuBK,CACN;AACH,GAzBI;AA2BLC,EAAAA,KA3BK,mBA2BI,CAER,CA7BI;AA+BL;AAEAC,EAAAA,iBAAiB,EAAE,6BAAU;AACT;AACZ;AACA,QAAIC,SAAS,GAAG,+EAAhB;AACA,QAAIC,IAAI,GAAG,IAAX,CAJqB,CAKrB;;AACAR,IAAAA,EAAE,CAACS,MAAH,CAAUC,IAAV,CAAe;AAAEC,MAAAA,GAAG,EAAEJ,SAAP;AAAkBK,MAAAA,IAAI,EAAE;AAAxB,KAAf,EAAgD,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQJN,MAAAA,IAAI,CAACO,IAAL,CAAUC,YAAV,CAAuBhB,EAAE,CAACiB,MAA1B,EAAkCC,WAAlC,GAAgD,IAAIlB,EAAE,CAACmB,WAAP,CAAmBL,OAAnB,CAAhD,CA7BwE,CA8BxE;AACA;AAGC,KAlCD;AAmCP;AA1EI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // this.loadingBackground();\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n\r\n    loadingBackground: function(){\r\n                        // 下载资源包\r\n            // 远程 url 带图片后缀名\r\n            var remoteUrl = \"http://127.0.0.1/ceshi.php?url=http://www.monster.com/app/loading/loading.jpg\";\r\n            var self = this;\r\n            // cc.loader.load(remoteUrl, function (err, texture) {\r\n            cc.loader.load({ url: remoteUrl, type: 'jpg' }, function (err, texture) {  \r\n            \r\n                //   直接释放某个贴图\r\n                // cc.loader.release(texture);\r\n                // // 释放一个 prefab 以及所有它依赖的资源\r\n                // var deps = cc.loader.getDependsRecursively('url_photo');\r\n                // cc.loader.release(deps);\r\n                // // 如果在这个 prefab 中有一些和场景其他部分共享的资源，你不希望它们被释放，有两种方法：\r\n                // // 1. 显式声明禁止某个资源的自动释放\r\n                // cc.loader.setAutoRelease(this.background, false);\r\n                // // 2. 将这个资源从依赖列表中删除\r\n                // var deps = cc.loader.getDependsRecursively('url_photo');\r\n                // var index = deps.indexOf(this.background);\r\n                // if (index !== -1)\r\n                //     deps.splice(index, 1);\r\n                // cc.loader.release(deps);\r\n\r\n                // this.node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture)\r\n                //  // 改用 cc.url.raw，此时需要声明 resources 目录和文件后缀名\r\n                // //  var realUrl = cc.url.raw(\"loading\");\r\n                // //  var texture = cc.textureCache.addImage(realUrl);\r\n                // console.log( texture);    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            self.node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture)\r\n            // self.node.spriteFrame.setTexture(texture.url);\r\n            // self.node.spriteFrame.setContentSize(res.getContentSize());\r\n\r\n\r\n            });\r\n    }\r\n});\r\n"]}